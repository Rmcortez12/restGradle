@RequestMapping annotation ensure that HTTP requests to /greeting are mapped to the greeting() method

use @RequestMapping(method=GET) to narrow the mapping

@RequestParam binds the value of the query string parameter name into the name parameter of the greeting() method
if the name parameter is absent in the request the deaultVlue of "World" is used.

The implementation of the method body creates and returns a new Greeting object with id
and content attributes based on the next value from the counter, and formats the given name by using the greeting template

RESTful web service controller populates and returns a Greeting object. The object data will be written
directly to the HTTP response as JSON

This code uses Spring 4s new @RestController annotation, which marks the class as a ocntroller where
every method returns a domain object instead of a viw. It's shorthand for @controller and @ResponseBody rolled together


The Greeting object must be converted to JSON
thanks to Spring's HTTP message converters upport, you don't do this conversion manually.
Because Jackson 2 is on the classpath , Spring's MappingJackson2HttpMessageConverter is automatically chosen to
convert the Greeting instance to JSON.

@SpringBootApplication
    is a convenience annotaiton that adds all of the following:

        @configuration tags teh calss as a source of bean definitions for the application context
        @EnableAutoConfiguration: tells Spring boot to start adding beans based on classpath settings, other beans,
            and various property settings.
        Normally you would add @EnableWebMvc for a Spring MVC app , but Spring Boot adds it automatically
            when it sees spring-webmvc on the classpath. THis flags the application as a web application and activates
            key behaviors such as setting up a DispatcherServlet

        @ComponentScan tells Spring to look for other components, configurations, and services in the hello package,
            allowing it to find the the controlles.

The main() method uses Spring Boot's SpringApplication.run() method to launch an application

gradle build

gradle bootRun